const SHA256 = require('crypto-js/sha256');
class Block {
    constructor(index, data, timestamp, previoushash = '') {
        this.index = index;
        this.data = data;
        this.timestamp = timestamp;
        this.previoushash = previoushash;
        this.hash = this.calculateHash();
        this.nonce = 0;
    }
    calculateHash() {
        return SHA256(this.index + this.previoushash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();
    }

    mineBlock(difficulty) {
        while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")) {
           this. nonce++;
            this.hash = this.calculateHash();
        }
        console.log("Hash is " + this.hash);
    }

}

class BlockChain {
    constructor() {
        this.chain = [this.createGenesisBlock()];
        this.difficulty = 2;
    }
    createGenesisBlock() {
        return new Block(0, "GenesisBlock", "11/11/2010", 0)
    }
    getLatestBlock() {
        return this.chain[this.chain.length - 1];
    }


    AddBlock(newBlock) {
        newBlock.previoushash = this.getLatestBlock().hash;
        newBlock.mineBlock(this.difficulty);
        this.chain.push(newBlock);
    }
    ischainvalid() {
        for (let i = 1; i < this.chain.length; i++) {
            const curentblock = this.chain[i];
            const previousblock = this.chain[i - 1];
            if (curentblock.hash !== curentblock.calculateHash()) {
                return false;
            }
            if (curentblock.previoushash !== previousblock.hash) {
                return false;
            }
        }
        return true;
    }
}


let blockvote = new BlockChain();
console.log("Mining Block 1....");
blockvote.AddBlock(new Block(1, "Can-1", "11/11/2022"));
console.log("Mining Block 2....");
blockvote.AddBlock(new Block(2, "Can-2", "12/11/2022"));
console.log('Is BlockChain is Valid ' + blockvote.ischainvalid());
console.log(JSON.stringify(blockvote, null, 2));
